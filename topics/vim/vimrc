set nocompatible
set shell=/bin/bash

" Notes ------------------------------------------------------------------- {{{
" - folding:
"   - to 'reveal' folds:
"     - zr (to reveal the current fold)
"     - zR (to reveal all folds)
"   - to 'mask' folds:
"     - zm (to mask the current fold)
"     - zM (to mask all folds)
"
" - variables:
"   - standard:
"     - let somevariable = 1
"   - options:
"     - let &number = 1
"   - local options:
"     - let &l:number = 0
"   - registers:
"     - let @a = 'hello!'
"
" - scoping:
"   - prefixes
"     - g:var
"       - a global variable
"     - b:var
"       - a buffer-local variable
"     - s:var
"       - a script-local variable
"     - l:var
"       - a function-local variable
"     - a:var
"       - a function-parameter-local variable
"
" - comparisons:
"   - always use ==# (case-sensitive) and ==? (case-insensitive) operators
"
" - functions:
"   - functions must begin with a upcased char
"   - args need to be prefixed with 'a:'
"       >>> function Test(arg)
"       >>>   echom a:arg
"       >>> endfunction
"
"   - varargs
"       >>> function Varg(...)
"       >>>   echom a:0
"       >>>   echom a:1
"       >>>   echo a:000
"       >>> endfunction
"
"   - string functions
"     - tolower, toupper, join, split, len
"
"   - normal/normal!
"     - always use 'normal!'
"
"   - regex
"     - always start patterns with '\v'
"
" - operators:
"   - types:
"     - v    (char-wise visual mode)
"     - V    (line-wise visual mode)
"     - char (char-wise motion)
"     - line (line-wise motion)
" /Notes ------------------------------------------------------------------ }}}

" Global Variables -------------------------------------------------------- {{{
let gitcommit_short_summary_max_length = 51
let docstring_max_length = 73
let short_line_max_length = 80
let long_line_max_length = 100
" /Global Variables ------------------------------------------------------- }}}

" Global Functions -------------------------------------------------------- {{{
function! RestoreCursor()
    if line("'\"") > 0 && line("'\"") <= line("$")
        exe "normal! g`\""
    endif
endfunction
" /Global Functions ------------------------------------------------------- }}}

" Configure Vundle -------------------------------------------------------- {{{
filetype on " without this vim emits a zero exit status, later, because of :ft off
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" install Vundle bundles
if filereadable(expand("~/.vimrc.bundles"))
    source ~/.vimrc.bundles
    source ~/.vimrc.bundles.local
endif

filetype plugin indent on
" /Configure Vundle ------------------------------------------------------- }}}

" Global Settings --------------------------------------------------------- {{{
syntax enable

" if !has('gui')
"     set term=$TERM
" endif
" if $term =~ '256color'
"     set t_co=256
" elseif $term =~ '^xterm$'
"     set t_co=256
" endif

augroup globalsettings
    au!
    au FocusLost * :silent! wall
    au VimResized * :wincmd =
    au BufReadPost * :call RestoreCursor()
augroup END

scriptencoding utf-8
set autoindent smartindent      " turn on auto/smart indenting
set autoread
set backspace=eol,start,indent  " allow backspacing over indent, eol, & start
let &colorcolumn  = gitcommit_short_summary_max_length
let &colorcolumn .= ',' . docstring_max_length
let &colorcolumn .= ',' . short_line_max_length
let &colorcolumn .= ',' . long_line_max_length
set complete=.,w,b,u,U,t,i,d    " do lots of scanning on tab completion
set cursorline
set directory=/tmp "sets the swap (.swp) file directory
set encoding=utf-8 " Necessary to show unicode glyphs
set expandtab                   " tabs are turned into spaces
set fo-=t   " don't automatically wrap text when typing
set foldlevelstart=0
set foldmethod=marker
set hidden
set history=2000                " write swap file to disk every 100 chars
set hlsearch   " highlight matched patterns
set ignorecase " ignore case
set incsearch  " highlight search result as you type it
set laststatus=2   " Always show the statusline
set list!
set listchars=tab:▸\ ,trail:•,extends:»,precedes:« " whitespace and trailing spaces
set nobackup
set nocursorline                " This fixes a lag issue with ruby syntax highlighting
set nojoinspaces
set relativenumber
set noswapfile
set nowrap  " don't automatically wrap on load
set nowritebackup
set number
set ruler                                                    " show where you are
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)           " A ruler on steroids
set shiftround                  " indents of 2
set shiftwidth=4                " indents of 2
set showcmd
set smartcase  " match case if a capital letter is present in the regexp
set smarttab                    " make <tab> and <backspace> smarter
set softtabstop=4               " softtabstops of 2
set spell spelllang=en_us
set tabstop=4                   " tabstops of 2
set tw=79   " width of document (used by gd)
set undolevels=10000            " number of forgivable mistakes
set updatecount=100             " write swap file to disk every 100 chars
" set viminfo=%100,'100,/100,h,\"500,:100,n~/.vim/viminfo
set wildignore=*_build/**,coverage/**,log/**,node_modules/**,target/**,tmp/**,*.pyc,*.rbc,
set wildmenu                    " show list instead of just completing
set wildmode=list:longest,full  " command <Tab> completion, list matches, then longest common part, then all.

set background=dark
colorscheme solarized
let g:solarized_termtrans=1
let g:solarized_contrast="high"
let g:solarized_visibility="high"
hi! IncSearch cterm=reverse
hi! Search cterm=reverse

set bs=2
set mouse=a " allow mouse scrolling
set pastetoggle=<F2>
" if exists('$TMUX')  " Support resizing in tmux
"     set clipboard+=unnamed
"     set ttymouse=xterm2
" endif
" /Global Settings -------------------------------------------------------- }}}

" Keybindings ------------------------------------------------------------- {{{
" let localmapleader=','
let mapleader=','
inoremap jk <esc>
inoremap Jk <esc>
inoremap JK <esc>
inoremap <C-l> <C-x><C-]>
inoremap <C-d>o {%<space><space>%}<left><left><left>
inoremap <C-d>t {{<space><space>}}<left><left><left>
inoremap <C-e>o <%<space><space>%><left><left><left>
inoremap <C-e>t <%=<space><space>%><left><left><left>
noremap <Leader>lo :lopen<cr>
noremap <Leader>t :SyntasticToggle<cr>
noremap <Leader>s :set spell!<cr>
noremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
nnoremap <tab> za
nnoremap zO zCzO
nnoremap Q gqap
nnoremap ; :
nnoremap <BS> :nohlsearch<cr>
nnoremap <C-c>n :lnext<cr>
nnoremap <C-c>p :lprev<cr>
nnoremap <C-n> :nohlsearch<cr>
nnoremap <Space> <C-f>
nnoremap <leader>] :TagbarToggle<CR>
nnoremap <leader>a :Ack<space>
nnoremap <leader>ah :Tabularize /=>/l1c1l0<CR>
nnoremap <leader>ae :Tabularize /=/l1c1l0<CR>
nnoremap <leader>a: :Tabularize /:/l1c1l0<CR>
nnoremap <leader>i :set list!<cr>
nnoremap <leader>n :setlocal number!<cr>
nnoremap <leader>w mz:%s/\s\+$//<cr>:let @/=''<cr>`z
nnoremap U :syntax sync fromstart<cr>:redraw!<cr>
nnoremap / /\v
nnoremap ? ?\v
vnoremap Q gq
vnoremap ; :
vnoremap < <gv  " better indentation
vnoremap <BS> :nohlsearch<cr>
vnoremap <C-c>n :lnext<cr>
vnoremap <C-c>p :lprev<cr>
vnoremap <C-n> :nohlsearch<cr>
vnoremap <Leader>q :sort<CR>
vnoremap <leader>] :TagbarToggle<CR>
vnoremap <leader>a :Ack<space>
vnoremap <leader>ah :Tabularize /=>/l1c1l0<CR>
vnoremap <leader>ae :Tabularize /=/l1c1l0<CR>
vnoremap <leader>a: :Tabularize /:/l1c1l0<CR>
vnoremap > >gv  " better indentation
vnoremap / /\v
vnoremap ? ?\v
" /Keybindings ------------------------------------------------------------ }}}

" Plugin Settings --------------------------------------------------------- {{{
" ack-mode ----------------------------------- {{{
if executable('ag')
  let g:ackprg = 'ag --nogroup --column'

  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif
" ack-mode ----------------------------------- }}}

" coffee-mode -------------------------------- {{{
augroup coffeemode
    au!
    au Filetype coffee setlocal ts=2 sts=2 sw=2
    au FileType coffee let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType coffee let &l:colorcolumn .= "," . docstring_max_length
    au FileType coffee let &l:colorcolumn .= "," . short_line_max_length
    au FileType coffee let &l:colorcolumn .= "," . long_line_max_length
augroup END
" /coffee-mode ------------------------------- }}}

" cpp-mode ----------------------------------- {{{
augroup cppmode
    au!
    au FileType cpp let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType cpp let &l:colorcolumn .= "," . docstring_max_length
    au FileType cpp let &l:colorcolumn .= "," . short_line_max_length
    au FileType cpp let &l:colorcolumn .= "," . long_line_max_length
    au Filetype cpp let syntastic_auto_loc_list = 0
augroup END
" /cpp-mode ---------------------------------- }}}

" cucumber-mode ------------------------------ {{{
augroup cucumbermode
    au!
    au Filetype cucumber setlocal ts=2 sts=2 sw=2
    au FileType cucumber let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType cucumber let &l:colorcolumn .= "," . docstring_max_length
    au FileType cucumber let &l:colorcolumn .= "," . short_line_max_length
    au FileType cucumber let &l:colorcolumn .= "," . long_line_max_length
augroup END
" /cucumber-mode ----------------------------- }}}

" elixir-mode -------------------------------- {{{
augroup elixirmode
    au!
    au Filetype elixir setlocal ts=2 sts=2 sw=2
    au FileType elixir let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType elixir let &l:colorcolumn .= "," . docstring_max_length
    au FileType elixir let &l:colorcolumn .= "," . short_line_max_length
    au FileType elixir let &l:colorcolumn .= "," . long_line_max_length
    au Filetype elixir setlocal foldlevel=99
    au Filetype elixir setlocal nospell
    au Filetype elixir setlocal foldmethod=syntax
    au Filetype elixir nnoremap <buffer> <leader>t :!mix test<CR>
    au Filetype eelixir inoremap <buffer> <C-d>o <%<space><space>%><left><left><left>
    au Filetype eelixir inoremap <buffer> <C-d>t <%=<space><space>%><left><left><left>
augroup END
" /elixir-mode ------------------------------- }}}

" erlang-mode -------------------------------- {{{
augroup erlangmode
    au!
    au BufRead,BufNewFile boss.config set filetype=erlang
    au BufRead,BufNewFile rebar.config set filetype=erlang
    au BufRead,BufNewFile relx.config set filetype=erlang
    au BufRead,BufNewFile *.app.src set filetype=erlang
    au BufRead,BufNewFile *.routes set filetype=erlang
    au FileType erlang let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType erlang let &l:colorcolumn .= "," . docstring_max_length
    au FileType erlang let &l:colorcolumn .= "," . short_line_max_length
    au FileType erlang let &l:colorcolumn .= "," . long_line_max_length
    au Filetype erlang setlocal foldmethod=marker foldmarker=^^^,$$$
augroup END

let g:rubycomplete_rails = 1
" /erlang-mode ------------------------------- }}}

" gitcommit-mode ----------------------------- {{{
augroup gitcommitmode
    au!
    au FileType gitcommit let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType gitcommit let &l:colorcolumn .= "," . docstring_max_length
augroup END
" /gitcommit-mode ---------------------------- }}}

" go-mode -------------------------------- {{{
augroup gomode
    au!
    au Filetype go setlocal ts=4 sw=4 sts=0 noexpandtab
    au FileType go let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType go let &l:colorcolumn .= "," . docstring_max_length
    au FileType go let &l:colorcolumn .= "," . short_line_max_length
    au FileType go let &l:colorcolumn .= "," . long_line_max_length
    au Filetype go setlocal foldmethod=syntax
augroup END
" /elixir-mode ------------------------------- }}}

" haproxy ------------------------------------ {{{
augroup haproxymode
    au!
    au BufRead,BufNewFile *.haproxy.conf set filetype=haproxy
    au FileType haproxy let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType haproxy let &l:colorcolumn .= "," . docstring_max_length
    au FileType haproxy let &l:colorcolumn .= "," . short_line_max_length
    au FileType haproxy let &l:colorcolumn .= "," . long_line_max_length
augroup END
" /haproxy ----------------------------------- }}}

" hgcommit-mode ------------------------------ {{{
augroup hgcommitmode
    au!
    au FileType hgcommit let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType hgcommit let &l:colorcolumn .= "," . docstring_max_length
augroup END
" /hgcommit-mode ----------------------------- }}}

" htmldjango --------------------------------- {{{
augroup htmlmode
    au!
    au BufRead,BufNewFile *.dtl  set filetype=htmldjango
    au BufRead,BufNewFile *.html set filetype=htmldjango
    au FileType markdown let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType markdown let &l:colorcolumn .= "," . docstring_max_length
    au FileType markdown let &l:colorcolumn .= "," . short_line_max_length
    au FileType markdown let &l:colorcolumn .= "," . long_line_max_length
augroup END
" /htmldjango -------------------------------- }}}

" indent-guides ------------------------------ {{{
let g:indent_guides_auto_colors = 0
augroup indentguides
    au!
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=black
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=darkgrey
augroup END
" /indent-guides ----------------------------- }}}

" js-mode ------------------------------------ {{{
augroup jsmode
    au!
    au FileType javascript let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType javascript let &l:colorcolumn .= "," . docstring_max_length
    au FileType javascript let &l:colorcolumn .= "," . short_line_max_length
    au FileType javascript let &l:colorcolumn .= "," . long_line_max_length
    au Filetype javascript setlocal foldmethod=syntax
augroup END
" /js-mode ----------------------------------- }}}

" LaTeX-Box ---------------------------------- {{{
let g:LatexBox_Folding = 1
" /LaTeX-Box ---------------------------------- }}}

" markdown ----------------------------------- {{{
augroup markdownmode
    au!
    au BufRead,BufNewFile *.md set filetype=markdown
    au FileType markdown let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType markdown let &l:colorcolumn .= "," . docstring_max_length
    au FileType markdown let &l:colorcolumn .= "," . short_line_max_length
    au FileType markdown let &l:colorcolumn .= "," . long_line_max_length
augroup END
" /markdown ---------------------------------- }}}

" powerline ---------------------------------- {{{
let g:Powerline_symbols = 'unicode'
" /powerline --------------------------------- }}}

" python-mode -------------------------------- {{{
augroup pythonmode
    au!
    " au BufWritePre *.py :%s/\s\+$//e
    au FileType python let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType python let &l:colorcolumn .= "," . docstring_max_length
    au FileType python let &l:colorcolumn .= "," . short_line_max_length
    au FileType python let &l:colorcolumn .= "," . long_line_max_length
    au Filetype python nnoremap <buffer> gf :YcmCompleter GoToDefinitionElseDeclaration<CR>
    au Filetype python vnoremap <buffer> gf :YcmCompleter GoToDefinitionElseDeclaration<CR>
    au Filetype python setlocal foldmethod=expr
augroup END

let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_server_python_interpreter="/usr/local/bin/python"
" /python-mode ------------------------------- }}}

" quickfix signs ----------------------------- {{{
let g:quickfixsigns_classes=['qfl', 'vcsdiff', 'breakpoints']
hi clear LinNr
hi clear SignColumn
" /quickfix signs ---------------------------- }}}

" rails-mode --------------------------------- {{{
augroup railsmode
    au!
    au User Rails silent! Rnavcommand decorator      app/decorators            -glob=**/* -suffix=_decorator.rb
    au User Rails silent! Rnavcommand observer       app/observers             -glob=**/* -suffix=_observer.rb
    au User Rails silent! Rnavcommand feature        features                  -glob=**/* -suffix=.feature
    au User Rails silent! Rnavcommand job            app/jobs                  -glob=**/* -suffix=_job.rb
    au User Rails silent! Rnavcommand mediator       app/mediators             -glob=**/* -suffix=_mediator.rb
    au User Rails silent! Rnavcommand stepdefinition features/step_definitions -glob=**/* -suffix=_steps.rb
augroup END
" /rails-mode -------------------------------- }}}

" rst ---------------------------------------- {{{
augroup rstmode
    au!
    au BufRead,BufNewFile *.rst.inc set filetype=rst
augroup END
" /rst --------------------------------------- }}}

" ruby-mode ---------------------------------- {{{
augroup rubymode
    au!
    au BufRead,BufNewFile *.cap set filetype=ruby
    au Filetype ruby setlocal ts=2 sts=2 sw=2
    au FileType ruby let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType ruby let &l:colorcolumn .= "," . docstring_max_length
    au FileType ruby let &l:colorcolumn .= "," . short_line_max_length
    au FileType ruby let &l:colorcolumn .= "," . long_line_max_length
    au Filetype ruby setlocal foldmethod=marker
    au Filetype eruby inoremap <buffer> <C-d>o <%<space><space>%><left><left><left>
    au Filetype eruby inoremap <buffer> <C-d>t <%=<space><space>%><left><left><left>
augroup END

let g:rubycomplete_rails = 1
" /ruby-mode --------------------------------- }}}

" stylus-mode -------------------------------- {{{
augroup stylusmode
    au!
    au Filetype stylus setlocal ts=2 sts=2 sw=2
    au FileType stylus let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType stylus let &l:colorcolumn .= "," . docstring_max_length
    au FileType stylus let &l:colorcolumn .= "," . short_line_max_length
    au FileType stylus let &l:colorcolumn .= "," . long_line_max_length
augroup END
" /stylus-mode ------------------------------- }}}

" syntastic ---------------------------------- {{{
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list=1 " automatically open error window
let g:syntastic_mode_map = { "mode": "active",
            \ "active_filetypes": ["python", "javascript"],
            \ "passive_filetypes": ["cucumber", "feature", "html", "scss"],
            \ }
let g:syntastic_css_checkers=['csslint']
let g:syntastic_rst_checkers=[]
let g:syntastic_cpp_check_header = 1
"let g:syntastic_ruby_checkers=['rubocop', 'mri']
" syntastic ---------------------------------- }}}

" text-mode ---------------------------------- {{{
augroup textmode
    au!
    au Filetype text setlocal wrap
    au FileType text let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType text let &l:colorcolumn .= "," . docstring_max_length
    au FileType text let &l:colorcolumn .= "," . short_line_max_length
    au FileType text let &l:colorcolumn .= "," . long_line_max_length
augroup END
" /text-mode --------------------------------- }}}

" UltiSnips ---------------------------------- {{{
let g:UltiSnips = {}
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnips.always_use_first_snippet = 1
" /UltiSnips --------------------------------- }}}

" vim-airline -------------------------------- {{{
if !exists('g:airline_powerline_fonts')
    " Use the default set of separators with a few customizations
    let g:airline_left_sep='›'  " Slightly fancier than '>'
    let g:airline_right_sep='‹' " Slightly fancier than '<'
endif
" /vim-airline ------------------------------- }}}

" vim-mode ----------------------------------- {{{
augroup vimmode
    au!
    au FileType vim setlocal foldmethod=marker
    au FileType vim let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType vim let &l:colorcolumn .= "," . docstring_max_length
    au FileType vim let &l:colorcolumn .= "," . short_line_max_length
    au FileType vim let &l:colorcolumn .= "," . long_line_max_length
augroup END
" /vim-mode ---------------------------------- }}}

" yaml --------------------------------------- {{{
augroup yamlmode
    au!
    au Filetype yaml setlocal ts=2 sts=2 sw=2
    au BufRead,BufNewFile *.fdoc set filetype=yaml
    au FileType yaml let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType yaml let &l:colorcolumn .= "," . docstring_max_length
    au FileType yaml let &l:colorcolumn .= "," . short_line_max_length
    au FileType yaml let &l:colorcolumn .= "," . long_line_max_length
augroup END
" /yaml -------------------------------------- }}}

" YouCompleteMe ------------------------------ {{{
if has('macunix')
    let g:ycm_path_to_python_interpreter = "/usr/bin/python"
else
    let g:ycm_path_to_python_interpreter = "/usr/bin/python"
endif
let g:ycm_confirm_extra_conf = 0
let g:ycm_show_diagnostics_ui = 1
let g:ycm_server_keep_logfiles = 1
" /YouCompleteMe ----------------------------- }}}

" zsh-mode ----------------------------------- {{{
augroup zshmode
    au!
    au FileType zsh setlocal foldmethod=marker
    au FileType zsh let &l:colorcolumn  = gitcommit_short_summary_max_length
    au FileType zsh let &l:colorcolumn .= "," . docstring_max_length
    au FileType zsh let &l:colorcolumn .= "," . short_line_max_length
    au FileType zsh let &l:colorcolumn .= "," . long_line_max_length
augroup END
" /zsh-mode ---------------------------------- }}}
" /Plugin Settings -------------------------------------------------------- }}}

" Local Configuration ----------------------------------------------------- {{{
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif
" /Local Configuration ---------------------------------------------------- }}}
