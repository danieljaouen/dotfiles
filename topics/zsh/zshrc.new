# Fig pre block. Keep at the top of this file.
[[ -f "$HOME/.fig/shell/zshrc.pre.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.pre.zsh"
# oh-my-zsh defaults ------------------------------------------------------ {{{
ZSH=$HOME/.oh-my-zsh

case "$OSTYPE" in
  darwin*) OS="OSX" ;;
  linux*) OS="LINUX" ;;
esac
# /oh-my-zsh defaults ----------------------------------------------------- }}}

# PATH -------------------------------------------------------------------- {{{
BASE_PATH=$HOME/.cargo/bin:/opt/homebrew/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
RBENV_PATH=$HOME/.rbenv/shims:$HOME/.rbenv/bin
if [[ "x$OS" == "xOSX" ]]
then
    # LOCAL_PATH --------------------------------------------------- {{{
    LOCAL_PATH=/usr/X11/bin
    LOCAL_PATH=/usr/local/opt/ruby/bin:$LOCAL_PATH
    LOCAL_PATH=/usr/local/share/npm/bin:$LOCAL_PATH
    LOCAL_PATH=/usr/local/var/go/bin:$LOCAL_PATH
    LOCAL_PATH=/usr/texbin:$LOCAL_PATH
    LOCAL_PATH=$HOME/.bin:$LOCAL_PATH
    LOCAL_PATH="/Applications/Visual Studio Code.app/Contents/Resources/app/bin:$LOCAL_PATH"
    LOCAL_PATH=$HOME/.asdf/installs/elixir/1.16.0/.mix/escripts:$LOCAL_PATH
    LOCAL_PATH=$HOME/.stack/programs/aarch64-osx/ghc-9.4.6/bin:$LOCAL_PATH
    # /LOCAL_PATH -------------------------------------------------- }}}

    export PATH=$RBENV_PATH:$LOCAL_PATH:$BASE_PATH
else
    # LOCAL_PATH --------------------------------------------------- {{{
    LOCAL_PATH=$HOME/.fly/bin:$HOME/.asdf/shims:$HOME/.asdf/bin:$HOME/.local/bin:$HOME/.bin:$LOCAL_PATH
    LOCAL_PATH=$HOME/.config/composer/vendor/bin:$HOME/.asdf/installs/elixir/1.16.0/.mix/escripts:$LOCAL_PATH
    # /LOCAL_PATH -------------------------------------------------- }}}

    export PATH=$RBENV_PATH:$LOCAL_PATH:$BASE_PATH
fi
# /PATH ------------------------------------------------------------------- }}}

# Plugins ----------------------------------------------------------------- {{{
base_plugins=(
    bundler
    capistrano
    fabric
    gem
    git
    git-extras
    mercurial
    mix
    node
    npm
    nvm
    pip
    postgres
    python
    rails
    rake
    rbenv
    redis-cli
    rsync
    ruby
    taskwarrior
    vagrant
    virtualenv
    vundle
    zsh-syntax-highlighting
)
if [[ "x$OS" == "xOSX" ]]
then
    local_plugins=(brew)
    plugins=($local_plugins $base_plugins)
else
    local_plugins=()
    plugins=($local_plugins $base_plugins)
fi
# /Plugins ---------------------------------------------------------------- }}}

source $ZSH/oh-my-zsh.sh

# OS-specific config ------------------------------------------------------ {{{
BASE_PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
RBENV_PATH=$HOME/.rbenv/shims:$HOME/.rbenv/bin
if [[ "x$OS" == "xOSX" ]]
then
    export MAIL=~/Mail
    export PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig
    export SHELL=/usr/local/bin/zsh
    export PAGER=less

    # unalias run-help
    # autoload run-help
    # HELPDIR=/usr/local/share/zsh/helpfiles

    # aws --------------------------------------------------------------------- {{{
    export AWS_CREDENTIAL_FILE="$HOME/.boto"
    export EC2_HOME="/usr/local/Cellar/ec2-api-tools/1.6.12.0/libexec"
    # /aws -------------------------------------------------------------------- }}}

else
    export SHELL=/usr/bin/zsh
    # eval "$(ssh-agent)"
    alias open=xdg-open
    alias hx=helix
fi
# /OS-specific config ----------------------------------------------------- }}}

# Global Options and Aliases ---------------------------------------------- {{{
unsetopt correct_all
setopt INTERACTIVE_COMMENTS

export EDITOR=nvim
export TERM=screen-256color-bce
export ANSIBLE_PARAMIKO_AGENT_FORWARDING=sudo_user
export ANSIBLE_NOCOWS=1
export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD
export ERL_AFLAGS="-kernel shell_history enabled"
if [ -r ~/.openai_api_key ]; then
    export OPENAI_API_KEY=$(cat ~/.openai_api_key)
fi

alias debug_email="python -m smtpd -n -c DebuggingServer localhost:1025"
alias j="z"
alias l='ls -lah'
alias less=$PAGER
alias mtr="sudo mtr -t"
alias mute="vol 0"
alias n="newsbeuter"
alias serve_this="python -m SimpleHTTPServer 8100"
alias t="task"
alias zless=$PAGER
alias ms=markserv
alias e=emacsclient
# /Global Options and Aliases --------------------------------------------- }}}

# ag ---------------------------------------------------------------------- {{{
alias agjs="ag -G '.*\.js$'"
alias agpy="ag -G '.*\.py$'"
alias aghtml="ag -G '.*\.html$'"
alias agyml="ag -G '.*\.yml$'"
alias agrb="ag -G '.*\.rb$'"
# /ag --------------------------------------------------------------------- }}}

# ansible ----------------------------------------------------------------- {{{
alias a="ansible"
alias ap="ansible-playbook"
alias api="ansible-playbook -i"
alias apik="ansible-playbook --ask-sudo-pass -i"
alias apvi="ansible-playbook -vvvv -i"
alias apvik="ansible-playbook -vvvv --ask-sudo-pass -i"
alias apio="ansible-playbook -i ~/.ansible.d/inventories/osx"
alias apios="ansible-playbook -i ~/.ansible.d/inventories/osx ~/.ansible.d/site.yml"
# /ansible ---------------------------------------------------------------- }}}

# cloc -------------------------------------------------------------------- {{{
alias cloc="cloc --read-lang-def=${HOME}/.clocrc"
# /cloc ------------------------------------------------------------------- }}}

# docker ------------------------------------------------------------------ {{{
alias dr="docker"
alias dri="docker images"
alias drpl="docker pull"
alias drps="docker ps"
alias drpu="docker push"
alias drr="docker run"
alias drs="docker search"
# /docker ----------------------------------------------------------------- }}}

# elixir ------------------------------------------------------------------ {{{
alias m="mix"
alias mc="mix compile"
alias mcf="mix compile --all --force"
alias md="mix dynamo"
alias mdg="mix deps.get"
alias mn="mix new"
alias mwn="mix weber.new"
# /elixir ----------------------------------------------------------------- }}}

# erlang ------------------------------------------------------------------ {{{
alias re="rebar"
# /erlang ----------------------------------------------------------------- }}}

# git --------------------------------------------------------------------- {{{
alias gc='git commit -m'
alias gp='git'
alias gpu='git'
# /git -------------------------------------------------------------------- }}}

# go ---------------------------------------------------------------------- {{{
export GOPATH=/usr/local/var/go
# /go --------------------------------------------------------------------- }}}

# hg ---------------------------------------------------------------------- {{{
alias h="hg"
alias hc="hg commit -m"
alias hm="hg commit -m 'merge.'"
alias hp="hg"
alias hpu="hg"
alias hqci="hg qci"
alias hqf="hg qf"
alias hqgl="hg qgl"
alias hqi="hg qi"
alias hqlog="hg gqlog"
alias hqn="hg qn"
alias hqpo="hg qpo"
alias hqpoa="hg qpoa"
alias hqpua="hg qpua"
alias hqq="hg qq"
alias hqr="hg qr"
alias hqrm="hg qrm"
alias hqst="hg qst"
alias hup="hg up"
# /hg --------------------------------------------------------------------- }}}

# javascript/node.js ------------------------------------------------------ {{{
# /javascript/node.js ----------------------------------------------------- }}}

# python/django ----------------------------------------------------------- {{{
eval "$(pyenv init --path)"
export PYTHONSTARTUP="$HOME/.pythonrc.py"

alias daspt='django-admin.py startproject --template=https://github.com/twoscoops/django-twoscoops-project/archive/master.zip --extension=py,rst,html'
alias fd="fab dev"
alias pm="python manage.py"
alias pmm='python manage.py migrate'
alias pmr='python manage.py runserver'
alias pmrp='python manage.py runserver_plus'
alias pmrpg='python manage.py runserver_plus --adminmedia=`pwd`/media/admin'
alias pms='python manage.py shell'
alias pmsdb='python manage.py syncdb'
alias pmsi='python manage.py schemamigration --initial'
alias pmsm='python manage.py schemamigration --auto'
alias pmsp='python manage.py shell_plus'
alias pyr='pyenv rehash'
# /python/django ---------------------------------------------------------- }}}

# ruby/rails -------------------------------------------------------------- {{{

if [[ "x$OS" == "xOSX" ]]
then
    eval "$(rbenv init -)"
fi
alias b='bundle'
alias be='bundle exec'
alias bec='bundle exec cucumber'
alias beg='bundle exec rails generate'
alias ber='bundle exec rake'
alias bers='bundle exec rspec'
alias bi='bundle install'
alias bu='bundle update'
alias rn='rails new'
alias rt='rake ctags'
alias rr='rbenv rehash'

function bug {
    bundle gem $1 --bin --test
}
# /ruby/rails ------------------------------------------------------------- }}}

# vagrant ----------------------------------------------------------------- {{{
alias v="vagrant"
alias vp="vagrant provision"
alias vs="vagrant suspend"
alias vup="vagrant up"
alias vupa="vagrant up --provider=aws"
# /vagrant ---------------------------------------------------------------- }}}

# prompt ------------------------------------------------------------------ {{{
function collapse_pwd {
    echo $(pwd | sed -e "s,^$HOME,~,")
}

function prompt_char {
    git branch >/dev/null 2>/dev/null && echo 'Â±' && return
    hg root >/dev/null 2>/dev/null && echo 'â˜¿' && return
    echo 'â—‹'
}

function rbenv_info {
    rbenv local 2>/dev/null || rbenv global 2>/dev/null
}

function battery_charge {
    echo `$BAT_CHARGE` 2>/dev/null
}

function virtualenv_info {
    [ $VIRTUAL_ENV ] && echo '('`basename $VIRTUAL_ENV`') '
}

# TODO: this is a terrible way to do this.  fix this up when it's not 3:30AM.
# zsh prompt expansions -------------------------------------------- {{{
local RESET_COLORS="[0m"
local RESET_COLORS_TMUX="Ptmux;[0m\\"
local BLACK_FOREGROUND="[30m"
local BLACK_FOREGROUND_BOLD="[1m[30m"
local BLACK_BACKGROUND="[40m"
local RED_FOREGROUND="[31m"
local RED_FOREGROUND_BOLD="[1m[31m"
local RED_BACKGROUND="[41m"
local GREEN_FOREGROUND="[32m"
local GREEN_FOREGROUND_BOLD="[1m[32m"
local GREEN_BACKGROUND="[42m"
local YELLOW_FOREGROUND="[33m"
local YELLOW_FOREGROUND_BOLD="[1m[33m"
local YELLOW_BACKGROUND="[43m"
local BLUE_FOREGROUND="[34m"
local BLUE_FOREGROUND_BOLD="[1m[34m"
local BLUE_BACKGROUND="[44m"
local MAGENTA_FOREGROUND="[35m"
local MAGENTA_FOREGROUND_BOLD="[1m[35m"
local MAGENTA_BACKGROUND="[45m"
local CYAN_FOREGROUND="[36m"
local CYAN_FOREGROUND_BOLD="[1m[36m"
local CYAN_BACKGROUND="[46m"
local WHITE_FOREGROUND="[37m"
local WHITE_FOREGROUND_BOLD="[1m[37m"
local WHITE_BACKGROUND="[47m"
local CLEAR_TO_EOL="[K"
local CLEAR_TO_EOL_TMUX="Ptmux;[K\\"
# /zsh prompt expansions ------------------------------------------- }}}

if [[ ! "x$TMUX" = "x" ]]; then
    CLEAR_TO_EOL=$CLEAR_TO_EOL_TMUX
fi

function hg_prompt_info {
    hg prompt --angle-brackets "\
${CLEAR_TO_EOL}\
${RESET_COLORS}
${GREEN_BOLD}\
${BLACK_BACKGROUND}\
[\
${BLACK_BACKGROUND}\
hg: \
${RESET_COLORS}\
${BLUE_FOREGROUND}\
${BLACK_BACKGROUND}\
<branch>\
${RESET_COLORS}\
${RED_FOREGROUND}\
${BLACK_BACKGROUND}\
<status|modified|unknown>\
<update>\
${RESET_COLORS}\
${BLACK_BACKGROUND}\
 \
<\
${RESET_COLORS}\
${MAGENTA_FOREGROUND}\
${BLACK_BACKGROUND}\
<\
tags|\
${RESET_COLORS}\
${GREEN_FOREGROUND_BOLD}\
${BLACK_BACKGROUND}\
:\
${RESET_COLORS}\
${MAGENTA_FOREGROUND}\
${BLACK_BACKGROUND}\
>\
>\
${RESET_COLORS}\
${GREEN_FOREGROUND_BOLD}\
${BLACK_BACKGROUND}\
]\
${CLEAR_TO_EOL}\
${RESET_COLORS}\
<
${RESET_COLORS}\
${GREEN_FOREGROUND_BOLD}\
${BLACK_BACKGROUND}\
[\
${RESET_COLORS}\
${BLACK_BACKGROUND}\
hg-patches: \
<\
patches\
|join( â†’ )\
|pre_applied(${RESET_COLORS}${YELLOW_FOREGROUND}${BLACK_BACKGROUND})\
|post_applied(${RESET_COLORS}${BLACK_BACKGROUND})\
|pre_unapplied(${RESET_COLORS}${GREEN_FOREGROUND_BOLD}${BLACK_BACKGROUND})\
|post_unapplied(${RESET_COLORS}${BLACK_BACKGROUND})\
>\
${RESET_COLORS}\
${GREEN_FOREGROUND_BOLD}\
${BLACK_BACKGROUND}\
]\
>" 2>/dev/null
}

PROMPT='\
${RESET_COLORS}
${GREEN_FOREGROUND_BOLD}\
${BLACK_BACKGROUND}\
[\
${RED_FOREGROUND_BOLD}\
%n\
${GREEN_FOREGROUND_BOLD}\
@\
${RESET_COLORS}\
${MAGENTA_FOREGROUND}\
${BLACK_BACKGROUND}\
%m\
${GREEN_FOREGROUND_BOLD}\
] \
${GREEN_FOREGROUND_BOLD}\
[\
${RESET_COLORS}\
${BLACK_BACKGROUND}\
pwd: \
${RESET_COLORS}\
${CYAN_FOREGROUND}\
${BLACK_BACKGROUND}\
$(collapse_pwd)\
${GREEN_FOREGROUND_BOLD}\
]\
$(git_prompt_info)\
$(hg_prompt_info)\
${RESET_COLORS}
${GREEN_FOREGROUND}\
${BLACK_BACKGROUND}\
$(virtualenv_info)\
${RESET_COLORS}\
${BLACK_BACKGROUND}\
$(prompt_char)\
${RESET_COLORS} '

ZSH_THEME_GIT_PROMPT_PREFIX="\
${CLEAR_TO_EOL}\
${RESET_COLORS}
${GREEN_FOREGROUND_BOLD}\
${BLACK_BACKGROUND}\
[\
${RESET_COLORS}\
${BLACK_BACKGROUND}\
git: \
${RESET_COLORS}\
${BLUE_FOREGROUND}\
${BLACK_BACKGROUND}"
ZSH_THEME_GIT_PROMPT_SUFFIX="${GREEN_FOREGROUND_BOLD}]"
ZSH_THEME_GIT_PROMPT_DIRTY="${RED_FOREGROUND_BOLD}!"
ZSH_THEME_GIT_PROMPT_UNTRACKED="${RED_FOREGROUND_BOLD}?"
ZSH_THEME_GIT_PROMPT_CLEAN=""

# function hg_prompt_info {
#     hg prompt --angle-brackets "\
# < on %{$fg[red]%}<branch>%{$reset_color%}>\
# < at %{$fg[yellow]%}<tags|%{$reset_color%}, %{$fg[yellow]%}>%{$reset_color%}>\
# %{$fg[green]%}<status|modified|unknown><update>%{$reset_color%}<
# patches: <patches|join( â†’ )|pre_applied(%{$fg[yellow]%})|post_applied(%{$reset_color%})|pre_unapplied(%{$fg_bold[green]%})|post_unapplied(%{$reset_color%})>>" 2>/dev/null
# }
#
# PROMPT='
# %{$fg[red]%}%n%{$reset_color%} at %{$fg[yellow]%}%m%{$reset_color%} in %{$fg_bold[green]%}$(collapse_pwd)%{$reset_color%}$(git_prompt_info)$(hg_prompt_info)
# $(virtualenv_info)$(prompt_char) '
#
# RPROMPT='$(battery_charge)'
#
# ZSH_THEME_GIT_PROMPT_PREFIX=" on %{$fg[red]%}"
# ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
# ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[green]%}!"
# ZSH_THEME_GIT_PROMPT_UNTRACKED="%{$fg[green]%}?"
# ZSH_THEME_GIT_PROMPT_CLEAN=""
# /prompt ----------------------------------------------------------------- }}}

# Local Configuration ----------------------------------------------------- {{{
if [[ -s $HOME/.zshrc.local ]]; then
    source $HOME/.zshrc.local
fi
# /Local Configuration ---------------------------------------------------- }}}


eval "$(starship init zsh)"

# Fig post block. Keep at the bottom of this file.
[[ -f "$HOME/.fig/shell/zshrc.post.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.post.zsh"
GUIX_PROFILE="$HOME/.guix-profile"
if [[ -d "$GUIX_PROFILE" ]]; then
    . "$GUIX_PROFILE/etc/profile"
fi
GUIX_PROFILE="$HOME/.config/guix/current"
if [[ -d "$GUIX_PROFILE" ]]; then
    . "$GUIX_PROFILE/etc/profile"
fi

[[ ! $(command -v nix) && -e "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh" ]] && source "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"

export PATH="$HOME/.deno/bin:$PATH"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
alias rgf='rg . | fzf | cut -d ":" -f 1'
alias ec="emacsclient"
alias nv="nvim"
alias n="nix"
alias gx="guix"
alias gxi="guix install"
alias gxd="guix describe"
alias npi="nix profile install"
alias nsn="nix search nixpkgs"
alias dc="docker-compose"
alias lbal='ledger -f ~/Dropbox/ledger/budget.dat balance \^assets \^liabilities'
alias lbie='ledger -f ~/Dropbox/ledger/budget.dat balance \^income \^expenses'
alias lref='ledger -M register -f ~/Dropbox/ledger/budget.dat expenses:food'
alias lres='ledger -M register -f ~/Dropbox/ledger/budget.dat expenses:subscriptions'
alias lrac='ledger -M register -f ~/Dropbox/ledger/budget.dat assets:checking'
alias lri='ledger -M register -f ~/Dropbox/ledger/budget.dat income'
alias lrlcc='ledger -M register -f ~/Dropbox/ledger/budget.dat liabilities:credit cards'
setopt inc_append_history

[[ $(command -v direnv) ]] && eval "$(direnv hook zsh)"

if [[ "x$OS" == "xOSX" ]]
then
    . /opt/homebrew/opt/asdf/libexec/asdf.sh
fi
export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"
export PATH="/opt/homebrew/Cellar/hy/0.28.0/libexec/bin:$PATH"
export PATH="$HOME/.local/share/pipx/venvs/hy/bin/:$PATH"
export MODULAR_HOME="${HOME}/.modular"
export PATH="${HOME}/.modular/pkg/packages.modular.com_mojo/bin:$PATH"
